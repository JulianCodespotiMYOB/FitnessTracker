name: Build and deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: fitness-tracker
        run: |
          docker build -t $REGISTRY/$REPOSITORY:latest .
          docker push $REGISTRY/$REPOSITORY:latest

  deploy:
    name: 'Deploy'
    needs: build
    runs-on: ubuntu-latest
    outputs: 
      serverIp: ${{ steps.output.outputs.server_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        working-directory: ./infrastructure
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ./infrastructure
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        working-directory: ./infrastructure
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./infrastructure
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_CONNECTION_STRING: ${{ secrets.CONNECTION_STRING }}

      - name: Terraform Output
        id: output
        run: | 
          IP=$(terraform-bin output -raw server_ip)
          echo "::set-output name=server_ip::$IP"

      - name: Post Deploy
        working-directory: ./infrastructure
        run: |
          IP=${{ steps.output.outputs.server_ip }}
          attempt_counter=0
          max_attempts=5

          until $(curl --output /dev/null --silent --head --fail $IP/health); do
              echo "[GET] $IP/health..."
              echo "[GET] ${IP}/health..."

              if [ ${attempt_counter} -eq ${max_attempts} ];then
                echo "Max attempts reached"
                exit 1
              fi

              printf '.'
              attempt_counter=$(($attempt_counter+1))
              sleep 5
          done

          curl -X POST $IP/Exercises